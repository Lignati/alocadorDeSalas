package file;

import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

//import dominio.*;
import org.raapi.*;
/*
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
*/
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;


public class LeArquivoExcel {
String nome;
	
	public LeArquivoExcel(String nome)
	{	
		this.nome = nome;
		System.out.println(nome);
	}
	
	
	
	public List<Feature> montaRecursos()
	{
		List<Feature> recursos = new ArrayList<Feature>();
		try {
			FileInputStream fs = new FileInputStream(nome);
			XSSFWorkbook wb = new XSSFWorkbook (fs);
		    
		    //pega dados da segunda planilha a que possui informacoes dos recursos
		    XSSFSheet planilha = wb.getSheetAt(1);
		    
		    XSSFRow linha;
		    XSSFCell celula;
		    String NomeRecurso, IDRecurso;
		    int linhas = planilha.getPhysicalNumberOfRows(); // Numero de linhas 
		    //System.out.println(linhas);
		    	    
		    int c=0;
		    for(int r=1; r<linhas; r++) {
		        linha = planilha.getRow(r);
		        if(linha != null) {
	                celula = linha.getCell((short)c);
	                if(celula != null)
	                {
	                	NomeRecurso = celula.getStringCellValue(); c++;
		                //System.out.print(NomeRecurso + "\t"); 
		                celula = linha.getCell((short)c);
		                if(celula != null)
		                {
		                	double id = celula.getNumericCellValue();
			                IDRecurso = Double.toString(id); c++;
			                //System.out.print(IDRecurso + "\t");
			                Identifier IdRec = new ID_Name(IDRecurso, NomeRecurso);
			                celula = linha.getCell((short)c);
			                if(celula == null)
			                {
				                String RecursoHidden = "";
				                Boolean hidden;
				                hidden = !(RecursoHidden.equals(""));
				                //System.out.print(hidden);
				                Feature novoRecurso = new Feature(IdRec, hidden);   
				                recursos.add(novoRecurso); c=0;
			                }
			                else
			                {
			                	boolean hide = celula.getBooleanCellValue();
				                String RecursoHidden = Boolean.toString(hide);
				                Boolean hidden;
				                hidden = !(RecursoHidden.equals(""));
				                //System.out.print(hidden);
				                Feature novoRecurso = new Feature(IdRec, hidden);   
				                recursos.add(novoRecurso); c=0;
			                }
			                //System.out.println("");
		                }
	                }                 	
		        }
		    }
		    wb.close();
		} catch(Exception ioe) {
		    ioe.printStackTrace();
		}
		return recursos;
	}
	
	
	public List<Building> montaPredios()
	{
		List<Building> predios = new ArrayList<Building>();
		Map<String,Feature> featureMap = new HashMap<>();
	    List<Feature> recursos = this.montaRecursos();
	    
	    for(Feature f : recursos){
            String featID = f.getIdentifier().getId();
           // System.out.println(f);
            
            featureMap.put(featID, f);
            //System.out.println(featID +"->" +f);
            
        }
		
		try {
			FileInputStream fs = new FileInputStream(nome);
			XSSFWorkbook wb = new XSSFWorkbook (fs);
		    
		    //pega dados da segunda planilha a que possui informacoes dos predios
		    XSSFSheet planilha = wb.getSheetAt(2);
		    
		    XSSFRow linha, linhaInicial;
		    XSSFCell celula, celulaInicial;
		    int linhas = planilha.getPhysicalNumberOfRows(); // Numero de linhas
		    //System.out.println(linhas);
		    boolean disponivelBool;
		    int c=0, i=1, ident=0, r=1; //flags
		    System.out.println(linhas);
		    while(r<linhas)
		    {
		    	linhaInicial 		= planilha.getRow(i);
		    	if(linhaInicial != null)
		    	{
		    		celulaInicial 		= linhaInicial.getCell((short)ident);
				    celula 				= linhaInicial.getCell((short)ident);
				    if(celula != null)
				    {
				    	String IDPredio 	= celulaInicial.getStringCellValue();		    
					    Identifier bid 		= new ID(IDPredio);
			            Building novoPredio = new Building(bid);
			            //System.out.println(IDPredio + "\t\t");
				    		    
					    while(celulaInicial.getStringCellValue().equals(celula.getStringCellValue())) {
					    	
					        linha = planilha.getRow(r);
				        	if(linha != null)
				        	{
				        		c=1; celula = linha.getCell((short)c);
					            String IDSala = celula.getStringCellValue(); c=4;
					            Identifier bidSala = new ID(IDSala);
					            //System.out.println(IDSala + "\t\t");
					            
					            celula = linha.getCell((short)c);
					            if(celula == null)
					            {
					            	disponivelBool = true; c=3;
					            	//System.out.print("    true");
					            }
					            else
					            {
					            	disponivelBool = false; c=3;
					            	//System.out.print("    false");
					            }
					          
				        		celula = linha.getCell((short)c);
					            double nroLugares = celula.getNumericCellValue(); c=2;
					            int aux = (int)nroLugares;
					            String numeroDeLugares = Integer.toString(aux);
					            Room novaSala = new Room(bidSala, Integer.parseInt(numeroDeLugares), disponivelBool);
					            //System.out.print("\t" + numeroDeLugares);
					            
					            celula = linha.getCell((short)c);
					            String IDRecursos = celula.getStringCellValue(); c=0;
					            System.out.println(IDRecursos);
					            List<String> RecursosSala = Arrays.asList(IDRecursos.split(", "));
					            //System.out.println(RecursosSala.get(0));
					            for(String f : RecursosSala)
					            {
					            	Feature recursoSala = featureMap.get(f);
					            	//System.out.println(featureMap.get(f));
					            	novaSala.addFeature(recursoSala);
					            	//System.out.print("    " + f);
					            }
					            //System.out.println("");
					            if(novaSala != null){
						            novoPredio.addRoom(novaSala); r++;
						            linha = planilha.getRow(r);
						            if(linha != null)
						            	celula = linha.getCell((short)c);
					            }
				        	}
				        	
					    } i=r; //atribuicao para setar para linha certa na planilha
					    if(novoPredio != null)
					    	predios.add(novoPredio);
				    }
				    
		    	}
			     
		    } wb.close();
	    } catch(Exception ioe) {
	    		ioe.printStackTrace();
	    	}
		return predios;
	}
	
	public List<Course> montaDisciplinas()
	{
		Map<String, Feature> featureMap = new HashMap<>();
		List<Feature> recursos = this.montaRecursos();
		
		for(Feature f : recursos) {
            String featID = f.getIdentifier().getId();
            featureMap.put(featID, f);
        }
		
		List<Course> disciplinas = new ArrayList<Course>();
		
		try {
			FileInputStream fs = new FileInputStream(nome);
			XSSFWorkbook wb = new XSSFWorkbook(fs);
		    
		    //pega dados da segunda planilha a que possui informacoes das disciplinas
		    XSSFSheet planilha = wb.getSheetAt(0);
		    
		    XSSFRow linha, linhaInicial;
			XSSFCell celula, celula2, celulaInicial, celulaInicial2, celulaInicialTeste;
		    int linhas = planilha.getPhysicalNumberOfRows(); // Numero de linhas
		    //System.out.println(linhas);
		    int r=1, i=1, indice = 0, ident=0, ident1=1, ident2=4, c=0; //flags
		    String testaCelulaVazia;
		    
		    while(r<linhas)
		    {
		    	linhaInicial 			= planilha.getRow(i);
		    	celulaInicialTeste 		= linhaInicial.getCell((short)ident);
		    	testaCelulaVazia		= celulaInicialTeste.toString();
		    	if((linhaInicial != null) && (testaCelulaVazia != ""))
		    	{
		    		celulaInicial 			= linhaInicial.getCell((short)ident);
				    celulaInicial2			= linhaInicial.getCell((short)ident1);
				    celula 					= linhaInicial.getCell((short)ident1);
				    if((celulaInicial != null) && (celula != null))
				    {
				    	String NomeDisciplina 	= celulaInicial.getStringCellValue();
				    	//System.out.print(NomeDisciplina + " ");
					    String IDDisciplina		= celulaInicial2.getStringCellValue();
					    //System.out.print(IDDisciplina + "\t");
					    Identifier idDisciplina = new ID_Name(IDDisciplina, NomeDisciplina);
			            Course novaDisciplina 	= new Course(idDisciplina);
			            
				    	
					    while(celulaInicial2.getStringCellValue().equals(celula.getStringCellValue()))
					    {
					    	
					    	
					    	linha = planilha.getRow(r);
					    	if(linha != null)
					    	{
					    		c=2; celula = linha.getCell((short)c);
					    		if(celula != null)
					    		{
					    			double numeroDeAlunos = celula.getNumericCellValue(); c=3;
						        	int aux = (int)numeroDeAlunos;
							        String numeroDeLugares = Integer.toString(aux);
						        	int NroAlunos = Integer.parseInt(numeroDeLugares);
						        	//System.out.print(numeroDeLugares + "\t");
						        	
						        	celula = linha.getCell((short)c); c=4;
						        	String professor = celula.getStringCellValue();
						        	List<String> professores = Arrays.asList(professor.split(","));
						        	//for(int j=0; j<professores.size(); j++)
						        		//System.out.print(professores.get(j) + "  ");
						        	//System.out.print("");
						        	celula = linha.getCell((short)c); 
						        	String IDTurma = celula.getStringCellValue();
						        	//System.out.print("    " + IDTurma + "\t");
						        	
						        	Identifier turmaID = new ID(IDTurma);
						        	Group novaTurma = new Group(NroAlunos, professores, turmaID);
						        	novaDisciplina.addGroup(novaTurma); indice++;
						        	
					        		celula = linha.getCell((short)ident1);
					        		celula2 = linha.getCell((short)ident2);
						        	
						        	while((IDTurma.equals(celula2.getStringCellValue())) && IDDisciplina.equals(celula.getStringCellValue()))
						        	{
						        		linha = planilha.getRow(r);
						        		if(linha != null)
						        		{
						        			c=9; celula = linha.getCell((short)c);
								        	String horaInicio = celula.getStringCellValue(); c=6;
								        	//System.out.print(horaInicio + "\t");
								        	
								        	celula = linha.getCell((short)c);
								        	String duracaoString = celula.getStringCellValue(); c=8;
								        	int duracao;
								        	if(duracaoString.equals(""))
								        		duracao = 120;
								        	else
								        		duracao = Integer.parseInt(duracaoString);
								        	//System.out.print(duracao + "\t");
								        	
								        	celula = linha.getCell((short)c);
								        	double diaDaSemana = celula.getNumericCellValue(); c=10;
								        	int aux2 = (int)diaDaSemana;
								        	String diaDaSemanaString = Integer.toString(aux2);
								        	int diaSemana = Integer.parseInt(diaDaSemanaString);
								        	//System.out.print(diaSemana + "\t");
								        	
								        	celula = linha.getCell((short)c);
								        	String recursoDoPredio = celula.getStringCellValue(); c=11;
								        	Identifier recursoPredioID;
								        	if(recursoDoPredio.equals(""))
								        	{
								        		recursoPredioID = null;
								        		//System.out.print("nada \t");
								        	}
								        	else
								        	{
								        		recursoPredioID = new ID(recursoDoPredio);
								        		//System.out.print("alguma coisa\t");
								        	} 
								        	
								        	celula = linha.getCell((short)c);
								        	String recursoDaSala = celula.getStringCellValue();
								        	Identifier recursoSalaID;
								        	if(recursoDaSala.equals(""))
								        	{
								        		recursoSalaID = null;
								        		//System.out.print("nada \t");
								        	}
								        	else
								        	{
								        		recursoSalaID = new ID(recursoDoPredio);
								        		//System.out.print("alguma coisa\t");
								        	}
							        		
								        	Session novaSessao = new Session(novaTurma, horaInicio, duracao, diaSemana, recursoPredioID, recursoSalaID);
								        	
								        	c=13; String recursos1 = celula.getStringCellValue();
								        	c=14; String recursos2 = celula.getStringCellValue();
								        	String recursosTotais = recursos1 + "," + recursos2;
								        	
								        	
								        	if(recursosTotais != null)
								        	{
								        		List<String> recursosSala = Arrays.asList(recursosTotais.split(","));
								        		for(String f : recursosSala)
								        		{
								        			Feature requisitoSessao = featureMap.get(f);
								        			novaSessao.addRequirement(requisitoSessao);
								        			//System.out.print("    " + f);
								        		}
								        		
								        	}
								        	//System.out.println("    sem recursos");
								        	
								        	novaDisciplina.getGroups().get(indice-1).addSession(novaSessao); 
								        	r++; linha = planilha.getRow(r);
								        	if(linha != null)
								        	{
								        		celula2 = linha.getCell((short)ident2);
									        	celula = linha.getCell((short)ident1);
								        	}	
						        		}	
						        		
						        	}
					    		}
					    	}		     
					    } i=r; indice = 0; 
					    //System.out.println(r);
				    	disciplinas.add(novaDisciplina);
				    }
		    	}
		    	else
		    		r=linhas;
		    } wb.close();
		} catch(Exception ioe) {
    			ioe.printStackTrace();
    		}
		return disciplinas;
	}
}
